version: 2.1
workflows:
  main:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - platform-check
      - unit:
          requires:
            - build
      - lint:
          requires:
            - build
      - package:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - build

job-references:
  php_image: &php_image
    circleci/php:latest-node

  mysql_image: &mysql_image
    circleci/mysql:5

  export_dependency_cache_version: &export_dependency_cache_version
    name: "Export $DEPENDENCY_CACHE_VERSION to a file"
    command: |
      echo "$DEPENDENCY_CACHE_VERSION" > ~/DEPENDENCY_CACHE_VERSION

  restore_composer: &restore_composer
    keys:
      - composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "composer.json" }}
      - composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-
      - composer-dependencies-

  install_composer: &install_composer
    name: "Install Composer dependencies"
    command: composer install -n --prefer-dist

  save_composer: &save_composer
    key: composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "composer.json" }}
    paths:
      - vendor

  restore_npm: &restore_npm
    keys:
      - npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "package.json" }}
      - npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-
      - npm-dependencies-

  install_npm: &install_npm
    name: "Install NPM dependencies"
    command: npm ci

  save_npm: &save_npm
    key: npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "package.json" }}
    paths:
      - node_modules

jobs:
  build:
    docker:
      - image: *php_image
    steps:
      - checkout

      - run: *export_dependency_cache_version
      - restore_cache: *restore_composer
      - run: *install_composer
      - save_cache: *save_composer
      - restore_cache: *restore_npm
      - run: *install_npm
      - save_cache: *save_npm

      - run:
          name: "Build"
          command: npm run build
      - persist_to_workspace:
          root: dist
          paths:
            - "*"

  platform-check:
    docker:
      - image: circleci/php:5.6-node
    steps:
      - checkout

      - run:
          name: "Check platform reqs"
          command: composer check-platform-reqs --no-dev

  unit:
    docker:
      - image: *php_image
      - image: *mysql_image
    steps:
      - checkout

      - run: *export_dependency_cache_version
      - restore_cache: *restore_composer
      - run: *install_composer
      - save_cache: *save_composer
      - restore_cache: *restore_npm
      - run: *install_npm
      - save_cache: *save_npm

      - attach_workspace:
          at: dist

      - run:
          name: "Prepare WordPress"
          command: |
            rm -rf /tmp/wordpress-tests-lib /tmp/wordpress
            sudo apt-get update && sudo apt-get install subversion default-mysql-client
            sudo -E docker-php-ext-install mysqli
            ./bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - run:
          name: "Run Tests"
          command: npm run unit
      - run:
          name: Upload Coverage Results
          command: bash <(curl -s https://codecov.io/bash) -f clover.xml -t ${CODECOV_TOKEN}
      - run:
          name: Collect test metadata
          command: |
            mkdir -p ~/phpunit
            mv junit.xml ~/phpunit/
          when: always
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit

  lint:
    docker:
      - image: *php_image
    steps:
      - checkout

      - run: *export_dependency_cache_version
      - restore_cache: *restore_composer
      - run: *install_composer
      - save_cache: *save_composer
      - restore_cache: *restore_npm
      - run: *install_npm
      - save_cache: *save_npm

      - attach_workspace:
          at: dist

      - run:
          name: "Install php-ast"
          command: |
            sudo pecl install ast
            echo 'extension=ast.so' | sudo tee /usr/local/etc/php/php.ini > /dev/null
      - run:
          name: "Lint"
          command: npm run lint

  package:
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: "Install ghr"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Create zip package"
          command: |
            cp -r dist skaut-google-drive-gallery
            zip -r skaut-google-drive-gallery.${CIRCLE_TAG}.zip skaut-google-drive-gallery
      - run:
          name: "Upload the package to GitHub"
          command: ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "Version ${CIRCLE_TAG}" ${CIRCLE_TAG} skaut-google-drive-gallery.${CIRCLE_TAG}.zip
